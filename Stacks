// Stacks (page-1)


#include<climits>
#include<iostream>
using namespace std;

class stackUsingArray{
    int *data;
    int nextIndex;
    int capacity;

    public:

    stackUsingArray(){
        data = new int(4);
        nextIndex = 0;
        capacity = 4;
    }
    //return the number of elements present in my stack

    int size(){
        return nextIndex;
    }
    bool isEmpty(){
        if (nextIndex == 0)
        {
            return true;
        }else{
            return false;
        }
        
    }

    //insert element

    void push(int element){
        if(nextIndex==capacity){
        //     cout << "The Stack is full!!" << endl;
        //     return;
        int *newData = new int[2*capacity];
        for (int i = 0; i < capacity; i++)
        {
            newData[i] = data[i];
        }
            capacity *= 2;
            delete [] data;
            data = newData;

         }
        data[nextIndex] = element;
        nextIndex++;
    }

    //to delete the element
    int pop(){
        if (isEmpty()){
            cout << "The stack is empty" << endl;
            return INT_MIN;
        }
        
        nextIndex--;
        return data[nextIndex];
    }
    int top(){
        if (isEmpty()){
            cout << "The stack is empty" << endl;
            return INT_MIN;
        }
        return data[nextIndex-1];
    }
};

// Stacks(page-2)

#include<iostream>
using namespace std;
#include "stacks_queues.cpp"
int main(){
    stackUsingArray s;
    s.push(10);
    s.push(20);
    s.push(30);
    s.push(40);
    s.push(50);

    cout<<s.top()<<endl;

    cout<<s.pop()<<endl;
    cout<<s.pop()<<endl;
    cout<<s.pop()<<endl;

    cout<<s.size()<<endl;
    cout<<s.isEmpty()<<endl;

}
