//PAGE-1
//Queues
//also kmown as first in first out
#include<iostream>
using namespace std;

template<typename T>

class queueUsingArray{
    T *data;
    int nextIndex;
    int firstIndex;
    int size;
    int capacity;

    public:

    queueUsingArray(int s){
        data = new T[s];
        nextIndex =  0;
        firstIndex = -1;
        size = 0;
        capacity = s;
    }
    int getSize(){
        return size;
    }
    int isEmpty(){
        return size==0;
    }
    //inserting an element
    void enqueue(T element){
        if (size == capacity)
        {
            cout<<"The Queue is Full!"<<endl;
            return;
        }
        
        data[nextIndex]==element;
        nextIndex = (nextIndex+1)%capacity;
        if (firstIndex == -1)
        {
            firstIndex = 0;
        }
        size++;
        
    }
    T front(){
        if (isEmpty())
        {
            cout<<"The Queue is Empty"<<endl;
            return 0;
        }
        return data[firstIndex];
        
    }
    T dequeue(){
         if (isEmpty())
        {
            cout<<"The Queue is Full!"<<endl;
            return 0;
        }
        T ans = data[firstIndex];
        firstIndex = (firstIndex+1)%capacity;
        size--;
        if (size==0)
        {
            nextIndex=0;
            firstIndex=-1;
        }
        return ans;
        
    }
};


//PAGE-2
#include<iostream>
using namespace std;
#include "queues.cpp"

int main(){
    queueUsingArray<int> q(5);
    q.enqueue(10);
    q.enqueue(20);
    q.enqueue(30);
    q.enqueue(40);
    q.enqueue(50);
    q.enqueue(60);

    cout<< q.front() << endl;
    
    cout<< q.dequeue() << endl;
    cout<< q.dequeue() << endl;
    cout<< q.dequeue() << endl;

    cout<< q.getSize() << endl;
    cout<< q.isEmpty() << endl;

}
